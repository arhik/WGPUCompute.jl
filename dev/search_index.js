var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = WGPUCompute","category":"page"},{"location":"#WGPUCompute","page":"Home","title":"WGPUCompute","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for WGPUCompute.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [WGPUCompute]","category":"page"},{"location":"#WGPUCompute.return_type-Tuple{Any, Any}","page":"Home","title":"WGPUCompute.return_type","text":"SPIRV.return_type(f, tt) -> r::Type\n\nReturn a type r such that f(args...)::r where args::tt.\n\n\n\n\n\n","category":"method"},{"location":"#WGPUCompute.wgpuconvert","page":"Home","title":"WGPUCompute.wgpuconvert","text":"wgpuconvert(x, [cce])\n\nThis function is called for every argument to be passed to a kernel, allowing it to be converted to a GPU-friendly format. By default, the function does nothing and returns the input object x as-is.\n\nDo not add methods to this function, but instead extend the underlying Adapt.jl package and register methods for the the Metal.Adaptor type.\n\n\n\n\n\n","category":"function"},{"location":"#WGPUCompute.wgpufunction-Union{Tuple{TT}, Tuple{F}, Tuple{F, TT}} where {F, TT}","page":"Home","title":"WGPUCompute.wgpufunction","text":"wgpufunction(f, tt=Tuple{}; kwargs...)\n\nLow-level interface to compile a function invocation for the currently-active GPU, returning a callable kernel object. For a higher-level interface, use @metal.\n\nThe output of this function is automatically cached, i.e. you can simply call wgpufunction in a hot path without degrading performance. New code will be generated automatically when the function changes, or when different types or keyword arguments are provided.\n\n\n\n\n\n","category":"method"}]
}
